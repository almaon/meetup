server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful


  
spring:
  application:
    name: meetup-gateway
  lifecycle:
    timeout-per-shutdown-phase: 15s
#  config:
#    import: "optional:configserver:"
  cloud:
#    config:
#      uri: http://localhost:8888
#      request-connect-timeout: 5000 # 5s
#      request-read-timeout: 5000 # 5s
#      fail-fast: false # In production, set to true
#      retry:
#        max-attempts: 6
#        initial-interval: 1000 # 1s
#        max-interval: 2000 # 2s
#        multiplier: 1.1
    gateway:
      httpclient:
        connect-timeout: 2000 # 2s
        response-timeout: 5s
        pool:
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      default-filters:
#        - SaveSession
#        - name: RequestRateLimiter
#          args:
#            redis-rate-limiter:
#              replenishRate: 10
#              burstCapacity: 20
#              requestedTokens: 1
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false
      routes:
#        - id: spa-route
#          uri: ${SPA_URL:http://localhost:3000}
#          predicates:
#            - Path=/**,/*.css,/*.js,/favicon.ico
        - id: meetup
#          uri: lb://meetup/api/
          uri: ${MEETUP_URL:http://localhost:9001}/api/
          predicates:
            - Path=/api/**
          filters:
            - name: CircuitBreaker
              args:
                name: meetupCircuitBreaker
                fallbackUri: forward:/public-fallback
        - id: meetup-register
#          uri: lb://meetup/api/
          uri: ${MEETUP_URL:http://localhost:9001}/public/api/
          predicates:
            - Path=/public/api/**
          filters:
            - name: CircuitBreaker
              args:
                name: meetupCircuitBreaker
                fallbackUri: forward:/public-fallback

#  data:
#    redis:
#      connect-timeout: 2s
#      host: localhost
#      port: 6379
#      timeout: 1s
#  session:
#    timeout: 10m
#    redis:
#      namespace: polar:edge

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 20
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 15000
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s

# oauth resource
keySetURI: http://localhost:8080/oauth2/jwks

eureka:
  client:
    enabled: false

logging:
  group:
    circuitbreaker: io.github.resilience4j, org.springframework.cloud.circuitbreaker
  level:
    circuitbreaker: info
    org.springframework.cloud.gateway: DEBUG
    reactor.netty.http.client: DEBUG
#    io.github.resilience4j: DEBUG
#  pattern:
#    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

info:
  system: Meetup Gateway

management:
  endpoints:
    web:
      exposure:
        include: configprops, env, gateway, health, heapdump, info, loggers, mappings, prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
      group:
        readiness:
          include: readinessState #,redis
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
